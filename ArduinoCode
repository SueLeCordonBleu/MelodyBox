/* 
 *  The Melody Box
 *  
 *  May 2019 
 *  By Chunhan Chen, Tianyi Xie, Yihan Tang
 *  
 *  Reference:
 *  https://itp.nyu.edu/physcomp/labs/labs-serial-communication/lab-midi-output-using-an-arduino/
 *  https://www.midi.org/specifications-old/item/gm-level-1-sound-set
 *  https://musescore.com/user/28590337/scores/5259983
 *  
 *  Wiring Instruction:
 *  Arduino MKR Zero
 *  Connect NeoPixel to pin 6;
 *  Connect Rotary Encoder to pin 4, 2;
 *  Connect Key Button to pin 7;
 *  Connect Instrument Switches to pin 12, 13, 14;
 *  
 */
 
//Setup Midi
#include <Encoder.h>

#include <MIDIUSB.h>

#include <Adafruit_NeoPixel.h>

#include <Keyboard.h>


#define LED_PIN 6
#define KEY_PIN 7
#define Ins1_PIN 12
#define Ins2_PIN 13
#define Ins3_PIN 14

//Rotary Encoder
//if the direction of the number is not what you want, change the pin order
Encoder myEnc(4, 2);

//NeoPixel LED control
#ifdef __AVR__
#include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif

// How many NeoPixels are attached to the Arduino?
#define LED_COUNT 60

// Declare our NeoPixel strip object:
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

int bpm = 72; //beats per minute
float beatDuration = 60.0 / bpm * 1000; //duration of a beat in ms

//Melody
//D5: 74; E5:76; G5: 79, F#5: 78.
//Each line is a bar (2 beats for Baby Shark)
int melody[] = {74, 0, 0, 0, 76, 0, 0, 0,
                79, 0, 79, 0, 79, 79, 79,
                0, 79, 79, 0, 74, 0, 76, 0,
                79, 0, 79, 0, 79, 79, 79,
                0, 79, 79, 0, 74, 0, 76, 0,
                79, 0, 79, 0, 79, 79, 79,
                0, 79, 79, 0, 79, 0, 79, 0,
                78, 0, 0, 0, 0, 0, 0, 0};

int noteIndex = 1;
int encoderRead = 0;
int noteNum = 64;

//Instrument Part
int currentInstrument = 0;
int instrumentNum = 4; //Instruments are ["Default", "piano", "Guitar", "Mixed"]

int prevKeyButtonState = LOW;

long oldPosition = 0; //Initialize encoder's reading 

void setup() {
  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.
  // Any other board, you can remove this part (but no harm leaving it):
  #if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
    clock_prescale_set(clock_div_1);
  #endif
  // END of Trinket-specific code.

  Serial.begin(9600);
  pinMode(KEY_PIN, INPUT); //key button pin
  Keyboard.begin(); // Initialize control over the keyboard:

  strip.begin(); // Initialize NeoPixel strip object (REQUIRED)
  strip.show(); // Turn OFF all pixels ASAP
  strip.setBrightness(50); // Set BRIGHTNESS to about 1/5 (max = 255)
}

void loop() {
  checkInsButton();
  int newKeyButtonState = digitalRead(KEY_PIN);
  if (newKeyButtonState == LOW) {
    colorWipe(strip.Color(0, 0, 0), 50); //turn the strip off
    strip.clear();
  } else if (newKeyButtonState == HIGH) {
    if (prevKeyButtonState == LOW) {
      colorWipe(strip.Color(127, 127, 127), 50); //white
    }

    //rotary encoder
    long newPosition = myEnc.read();
    if (newPosition != oldPosition) { //compare current and last knob state: 
      if (newPosition - oldPosition >= 4) { //debouncing a bit
        int knobChange = newPosition - oldPosition;
        encoderRead++;
        oldPosition = newPosition;
        noteIndex = abs(encoderRead) % noteNum; //calculate note index
        Serial.println(noteIndex);
        midiCommand(0x90, melody[noteIndex], 0x7F);
        int index = encoderRead % 1280; //NeoPixel has 8 leds
        rainbowCopy(index * 256); // Flowing rainbow cycle along the whole strip
      }
    }
  }
  prevKeyButtonState = newKeyButtonState;
}

// MIDI part
void midiCommand(byte cmd, byte data1, byte data2) {
  // First parameter is the event type (top 4 bits of the command byte).
  // Second parameter is command byte combined with the channel.
  // Third parameter is the first data byte
  // Fourth parameter second data byte
  midiEventPacket_t midiMsg = {
    cmd >> 4,
    cmd,
    data1,
    data2
  };
  MidiUSB.sendMIDI(midiMsg);
}

//NeoPixel Part
void colorWipe(uint32_t color, int wait) {
  for (int i = 0; i < strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color); //  Set pixel's color (in RAM)
    strip.show(); //  Update strip to match
    delay(wait); //  Pause for a moment
  }
}

void colorSetting(uint32_t color) {
  for (int i = 0; i < strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color); //  Set pixel's color (in RAM)
    strip.show(); //  Update strip to match
  }
}

// Rainbow cycle along whole strip. Pass delay time (in ms) between frames.
void rainbowCopy(int index) {
  for (int i = 0; i < strip.numPixels(); i++) {
    int pixelHue = index + (i * 65536L / strip.numPixels());
    strip.setPixelColor(i, strip.gamma32(strip.ColorHSV(pixelHue)));
  }
  strip.show();
}

//Switch Instrument Part
void checkInsButton() {
  int Ins1Read = digitalRead(Ins1_PIN);
  int Ins2Read = digitalRead(Ins2_PIN);
  int Ins3Read = digitalRead(Ins3_PIN);
  if (Ins1Read == LOW && Ins2Read == HIGH && Ins3Read == LOW) {
    switchInstrument(1);
  } else if (Ins1Read == HIGH && Ins2Read == LOW && Ins3Read == HIGH) {
    switchInstrument(2);
  } else if (Ins1Read == HIGH && Ins2Read == HIGH && Ins3Read == HIGH) {
    switchInstrument(3);
  } else if (Ins1Read == LOW && Ins2Read == LOW && Ins3Read == LOW) {
    switchInstrument(0); //Default state                  
  }
}

void switchInstrument(int goalInstrument) {
  int distance = 0;
  if (currentInstrument < goalInstrument) {
    distance = goalInstrument - currentInstrument;
    if (goalInstrument == 1) {
      colorSetting(strip.Color(255, 0, 0)); //Red
    } else if (goalInstrument == 2) {
      colorSetting(strip.Color(0, 255, 0)); //Green
    } else if (goalInstrument == 3) {
      colorSetting(strip.Color(0, 0, 255)); //Blue
    } else {
      colorSetting(strip.Color(127, 127, 127)); //White
    }
    for (int i = 0; i < distance; i++) {
      Keyboard.press(KEY_DOWN_ARROW); //Switch instrument by pushing up arrow
      Serial.println("DOWN!");
      delay(100);
      Keyboard.releaseAll();
    }
    currentInstrument = goalInstrument;
  } else if (currentInstrument > goalInstrument) {
    distance = currentInstrument - goalInstrument;
    if (goalInstrument == 1) {
      colorSetting(strip.Color(255, 0, 0)); //Red
    } else if (goalInstrument == 2) {
      colorSetting(strip.Color(0, 255, 0)); //Green
    } else if (goalInstrument == 3) {
      colorSetting(strip.Color(0, 0, 255)); //Blue
    } else {
      colorSetting(strip.Color(127, 127, 127)); //White
    }
    for (int i = 0; i < distance; i++) {
      Keyboard.press(KEY_UP_ARROW); //Switch instrument by pushing down arrow
      Serial.println("UP!");
      delay(100);
      Keyboard.releaseAll();
    }
    currentInstrument = goalInstrument;
  }
}
